services:
  frontend:
    build: ./frontend
    container_name: sv_frontend
    ports:
      - "3000:3000"
    networks:
      iceberg_net:
  minio:
      image: minio/minio
      container_name: minio
      environment:
        - MINIO_ROOT_USER=admin
        - MINIO_ROOT_PASSWORD=password
        - MINIO_DOMAIN=minio
      networks:
        iceberg_net:
          aliases:
            - warehouse.minio
      ports:
        - 9001:9001
        - 9000:9000
      command: ["server", "/data", "--console-address", ":9001"]

  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: > 
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc mb minio/flink;
      /usr/bin/mc anonymous set download minio/warehouse;
      /usr/bin/mc admin policy attach minio readwrite --user admin;
      tail -f /dev/null
      "

  rest:
    image: tabulario/iceberg-rest:1.5.0
    container_name: iceberg-rest
    networks:
      iceberg_net:
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
    depends_on:
      - minio

  create_table:
    build:
      context: ./backend
      dockerfile: Dockerfile.create_table
    container_name: sv_create_table
    volumes:
      - ./backend:/app
    networks:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - PYICEBERG_CATALOG__DEFAULT__URI=http://iceberg-rest:8181
      - PYICEBERG_CATALOG__DEFAULT__IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - PYICEBERG_CATALOG__DEFAULT__S3__ENDPOINT=http://minio:9000
      - PYICEBERG_CATALOG__DEFAULT__TYPE=rest
    depends_on:
      - rest
      - minio
      - mc

  # --- Kafka: Controllers (3) ---
  controller-1:
    image: apache/kafka:3.9.1
    container_name: controller-1
    hostname: controller-1
    networks:
      iceberg_net:
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://controller-1:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - controller-1-data:/var/lib/kafka/data

  controller-2:
    image: apache/kafka:3.9.1
    container_name: controller-2
    hostname: controller-2
    networks:
      iceberg_net:
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://controller-2:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - controller-2-data:/var/lib/kafka/data

  controller-3:
    image: apache/kafka:3.9.1
    container_name: controller-3
    hostname: controller-3
    networks:
      iceberg_net:
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://controller-3:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - controller-3-data:/var/lib/kafka/data

  # --- Kafka: Brokers (3) ---
  broker-1:
    image: apache/kafka:3.9.1
    container_name: broker-1
    depends_on: [controller-1, controller-2, controller-3]
    networks:
      iceberg_net:
    ports: ["29092:9092"]
    environment:
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: PLAINTEXT://:19092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:19092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_NUM_PARTITIONS: 8
      KAFKA_COMPRESSION_TYPE: zstd
      KAFKA_MESSAGE_MAX_BYTES: 1048576
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: "true"
      KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 30
      KAFKA_LEADER_IMBALANCE_PER_BROKER_PERCENTAGE: 10
    volumes:
      - broker-1-data:/var/lib/kafka/data

  broker-2:
    image: apache/kafka:3.9.1
    container_name: broker-2
    depends_on: [controller-1, controller-2, controller-3]
    networks:
      iceberg_net:
    ports: ["39092:9092"]
    environment:
      KAFKA_NODE_ID: 5
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: PLAINTEXT://:19092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:19092,PLAINTEXT_HOST://localhost:39092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_NUM_PARTITIONS: 8
      KAFKA_COMPRESSION_TYPE: zstd
      KAFKA_MESSAGE_MAX_BYTES: 1048576
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: "true"
      KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 30
      KAFKA_LEADER_IMBALANCE_PER_BROKER_PERCENTAGE: 10
    volumes:
      - broker-2-data:/var/lib/kafka/data

  broker-3:
    image: apache/kafka:3.9.1
    container_name: broker-3
    depends_on: [controller-1, controller-2, controller-3]
    networks:
      iceberg_net:
    ports: ["49092:9092"]
    environment:
      KAFKA_NODE_ID: 6
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: PLAINTEXT://:19092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-3:19092,PLAINTEXT_HOST://localhost:49092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_NUM_PARTITIONS: 8
      KAFKA_COMPRESSION_TYPE: zstd
      KAFKA_MESSAGE_MAX_BYTES: 1048576
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: "true"
      KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 30
      KAFKA_LEADER_IMBALANCE_PER_BROKER_PERCENTAGE: 10
    volumes:
      - broker-3-data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker-1:19092,broker-2:19092,broker-3:19092
    depends_on:
      - broker-1
      - broker-2
      - broker-3
    networks:
      iceberg_net:

  stream_writer:
    build:
      context: ./backend
    container_name: stream_writer
    volumes:
      - ./backend:/app
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=broker-1:19092,broker-2:19092,broker-3:19092
    ports:
      - "8000:8000"
    depends_on:
      - broker-1
      - broker-2
      - broker-3
      - rest
      - minio
    networks:
      iceberg_net:

  jobmanager:
    build:
      context: ./backend
      dockerfile: Dockerfile.flink
    image: myflink:1.18.1-extra
    command: jobmanager
    container_name: sv_jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        parallelism.default: 8
        # 체크포인트/복구 기본값
        execution.checkpointing.interval: 30 s
        execution.checkpointing.timeout: 5 min
        execution.checkpointing.min-pause: 5 s
        execution.checkpointing.unaligned: true
        execution.checkpointing.externalized-checkpoint-retention: RETAIN_ON_CANCELLATION
        table.exec.source.idle.timeout: 5 s
        # MinIO(체크포인트) 설정
        state.checkpoints.dir: s3://flink/checkpoints/
        s3.endpoint: http://minio:9000
        s3.access-key: admin
        s3.secret-key: password
        s3.path.style.access: true
        s3.ssl.enabled: false
      - AWS_REGION=us-east-1
    ports: ["8081:8081"]
    networks: [iceberg_net]

  taskmanager:
    build:
      context: ./backend
      dockerfile: Dockerfile.flink
    deploy:
      replicas: 2
    image: myflink:1.18.1-extra
    command: taskmanager
    depends_on: [jobmanager]
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 8   # 머신 코어에 맞춰 조정
        parallelism.default: 8
        # 체크포인트/복구(동일하게)
        execution.checkpointing.interval: 30 s
        execution.checkpointing.timeout: 5 min
        execution.checkpointing.min-pause: 5 s
        execution.checkpointing.unaligned: true
        execution.checkpointing.externalized-checkpoint-retention: RETAIN_ON_CANCELLATION
        table.exec.source.idle.timeout: 5 s
        # MinIO(체크포인트)
        state.checkpoints.dir: s3://flink/checkpoints/
        s3.endpoint: http://minio:9000
        s3.access-key: admin
        s3.secret-key: password
        s3.path.style.access: true
        s3.ssl.enabled: false
      - AWS_REGION=us-east-1
    networks: [iceberg_net]


  streamlit:
    build:
      context: ./backend
      dockerfile: Dockerfile.streamlit 
    command: streamlit run st_app/main.py
    container_name: sv_streamlit
    volumes:
      - ./backend:/app
    ports:
      - "8501:8501"
    networks:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - PYICEBERG_CATALOG__DEFAULT__URI=http://iceberg-rest:8181
      - PYICEBERG_CATALOG__DEFAULT__IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - PYICEBERG_CATALOG__DEFAULT__S3__ENDPOINT=http://minio:9000
      - PYICEBERG_CATALOG__DEFAULT__TYPE=rest

  spark-iceberg:
    image: tabulario/spark-iceberg:3.5.5_1.8.1
    container_name: spark-iceberg
    networks:
      iceberg_net:
    depends_on:
      - rest
      - minio
    volumes:
      - ./backend/scripts/notebooks:/home/iceberg/notebooks/notebooks
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - PYICEBERG_CATALOG__DEFAULT__URI=http://iceberg-rest:8181
      - PYICEBERG_CATALOG__DEFAULT__IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - PYICEBERG_CATALOG__DEFAULT__S3__ENDPOINT=http://minio:9000
      - PYICEBERG_CATALOG__DEFAULT__TYPE=rest
    ports:
      - 8889:8888

  k6:
    image: grafana/k6:latest
    profiles: ["test"]
    depends_on:
      - stream_writer
    networks:
      - iceberg_net
    volumes:
      - ./backend/tests:/scripts:ro   # ← 여기에 e2e_http_events.js 두었죠
    environment:
      - RATE=20000        # 총 EPS (원하는 값으로 수정/실행 시 -e로 override 가능)
      - DURATION=2m       # 테스트 지속 시간
      - URL=http://stream_writer:8000/api/events   # ← 같은 네트워크의 백엔드 서비스명
      - PRE_VUS=2000
      - MAX_VUS=8000
    command: >
      run /scripts/e2e_http_events.js

networks:
  iceberg_net:
    name: iceberg_net
    driver: bridge

volumes:
  controller-1-data:
  controller-2-data:
  controller-3-data:
  broker-1-data:
  broker-2-data:
  broker-3-data: